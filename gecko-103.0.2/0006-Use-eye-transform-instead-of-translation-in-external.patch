From e2d25e684e612158896ca6b0d418256aa7005b4a Mon Sep 17 00:00:00 2001
From: Imanol Fernandez <ifernandez@igalia.com>
Date: Wed, 16 Mar 2022 17:12:42 +0100
Subject: [PATCH 06/16] Use eye transform instead of translation in external_vr

---
 dom/vr/VRServiceTest.cpp              | 36 +++++++++------------------
 dom/vr/XRFrame.cpp                    | 17 ++++---------
 dom/vr/XRView.cpp                     | 13 ++++------
 dom/vr/XRView.h                       |  6 ++---
 gfx/vr/external_api/moz_external_vr.h |  4 +--
 gfx/vr/gfxVR.cpp                      | 14 ++++++++---
 gfx/vr/gfxVR.h                        |  1 +
 7 files changed, 38 insertions(+), 53 deletions(-)

diff --git a/dom/vr/VRServiceTest.cpp b/dom/vr/VRServiceTest.cpp
index 06720328c2cb..ed132e191338 100644
--- a/dom/vr/VRServiceTest.cpp
+++ b/dom/vr/VRServiceTest.cpp
@@ -95,10 +95,15 @@ void VRMockDisplay::Create() {
   state.eyeResolution.width = 1836;   // 1080 * 1.7
   state.eyeResolution.height = 2040;  // 1200 * 1.7
 
+  float identity[16] = { 
+      1.0f, 0.0f, 0.0f, 0.0f,
+      0.0f, 1.0f, 0.0f, 0.0f,
+      0.0f, 0.0f, 1.0f, 0.0f,
+      0.0f, 0.0f, 0.0f, 1.0f
+  };
+
   for (uint32_t eye = 0; eye < VRDisplayState::NumEyes; ++eye) {
-    state.eyeTranslation[eye].x = 0.0f;
-    state.eyeTranslation[eye].y = 0.0f;
-    state.eyeTranslation[eye].z = 0.0f;
+    memcpy(state.eyeTransform[eye], identity, sizeof(identity));
     state.eyeFOV[eye] = gfx::VRFieldOfView(45.0, 45.0, 45.0, 45.0);
   }
 
@@ -106,25 +111,8 @@ void VRMockDisplay::Create() {
   state.stageSize.width = 1.0f;
   state.stageSize.height = 1.0f;
 
-  state.sittingToStandingTransform[0] = 1.0f;
-  state.sittingToStandingTransform[1] = 0.0f;
-  state.sittingToStandingTransform[2] = 0.0f;
-  state.sittingToStandingTransform[3] = 0.0f;
-
-  state.sittingToStandingTransform[4] = 0.0f;
-  state.sittingToStandingTransform[5] = 1.0f;
-  state.sittingToStandingTransform[6] = 0.0f;
-  state.sittingToStandingTransform[7] = 0.0f;
-
-  state.sittingToStandingTransform[8] = 0.0f;
-  state.sittingToStandingTransform[9] = 0.0f;
-  state.sittingToStandingTransform[10] = 1.0f;
-  state.sittingToStandingTransform[11] = 0.0f;
-
-  state.sittingToStandingTransform[12] = 0.0f;
+  memcpy(state.sittingToStandingTransform, identity, sizeof(identity));
   state.sittingToStandingTransform[13] = 0.75f;
-  state.sittingToStandingTransform[14] = 0.0f;
-  state.sittingToStandingTransform[15] = 1.0f;
 
   VRHMDSensorState& sensorState = SensorState();
   gfx::Quaternion rot;
@@ -221,9 +209,9 @@ void VRMockDisplay::SetEyeOffset(VREye aEye, double aOffsetX, double aOffsetY,
                                      ? gfx::VRDisplayState::Eye_Left
                                      : gfx::VRDisplayState::Eye_Right;
   VRDisplayState& state = DisplayState();
-  state.eyeTranslation[eye].x = (float)aOffsetX;
-  state.eyeTranslation[eye].y = (float)aOffsetY;
-  state.eyeTranslation[eye].z = (float)aOffsetZ;
+  state.eyeTransform[eye][12] = (float)aOffsetX;
+  state.eyeTransform[eye][13] = (float)aOffsetY;
+  state.eyeTransform[eye][14] = (float)aOffsetZ;
 }
 
 bool VRMockDisplay::CapPosition() const {
diff --git a/dom/vr/XRFrame.cpp b/dom/vr/XRFrame.cpp
index 95f3028e17c0..2f57aa19e643 100644
--- a/dom/vr/XRFrame.cpp
+++ b/dom/vr/XRFrame.cpp
@@ -11,6 +11,7 @@
 #include "mozilla/dom/XRView.h"
 #include "mozilla/dom/XRReferenceSpace.h"
 #include "VRDisplayClient.h"
+#define VRB_ERROR(format, ...) __android_log_print(ANDROID_LOG_ERROR, "VRB", format, ##__VA_ARGS__);
 
 namespace mozilla::dom {
 
@@ -88,20 +89,13 @@ already_AddRefed<XRViewerPose> XRFrame::GetViewerPose(
     viewerPose = mSession->PooledViewerPose(headTransform, emulatedPosition);
 
     auto updateEye = [&](int32_t viewIndex, gfx::VRDisplayState::Eye eye) {
-      auto offset = displayInfo.GetEyeTranslation(eye);
-      auto eyeFromHead = gfx::Matrix4x4Double::Translation(
-          gfx::PointDouble3D(offset.x, offset.y, offset.z));
-      auto eyeTransform = eyeFromHead * headTransform;
-      gfx::PointDouble3D eyePosition;
-      gfx::QuaternionDouble eyeRotation;
-      gfx::PointDouble3D eyeScale;
-      eyeTransform.Decompose(eyePosition, eyeRotation, eyeScale);
+      auto eyeFromHead = displayInfo.GetEyeTransform(eye);
+      auto viewTransform = eyeFromHead * headTransform;
 
       const gfx::VRFieldOfView fov = displayInfo.mDisplayState.eyeFOV[eye];
       gfx::Matrix4x4 projection =
           fov.ConstructProjectionMatrix(depthNear, depthFar, true);
-      viewerPose->GetEye(viewIndex)->Update(eyePosition, eyeRotation,
-                                            projection);
+      viewerPose->GetEye(viewIndex)->Update(viewTransform, projection);
     };
 
     updateEye(0, gfx::VRDisplayState::Eye_Left);
@@ -120,8 +114,7 @@ already_AddRefed<XRViewerPose> XRFrame::GetViewerPose(
 
     viewerPose =
         mSession->PooledViewerPose(gfx::Matrix4x4Double(), emulatedPosition);
-    viewerPose->GetEye(0)->Update(gfx::PointDouble3D(), gfx::QuaternionDouble(),
-                                  projection);
+    viewerPose->GetEye(0)->Update(gfx::Matrix4x4Double(), projection);
   }
 
   return viewerPose.forget();
diff --git a/dom/vr/XRView.cpp b/dom/vr/XRView.cpp
index 93ec84f88cdf..76aadf34385c 100644
--- a/dom/vr/XRView.cpp
+++ b/dom/vr/XRView.cpp
@@ -23,8 +23,7 @@ NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE(XRView, Release)
 XRView::XRView(nsISupports* aParent, const XREye& aEye)
     : mParent(aParent),
       mEye(aEye),
-      mPosition(gfx::PointDouble3D()),
-      mOrientation(gfx::QuaternionDouble()),
+      mEyeTransform(gfx::Matrix4x4Double()),
       mJSProjectionMatrix(nullptr) {
   mozilla::HoldJSObjects(this);
 }
@@ -36,14 +35,12 @@ JSObject* XRView::WrapObject(JSContext* aCx,
   return XRView_Binding::Wrap(aCx, this, aGivenProto);
 }
 
-void XRView::Update(const gfx::PointDouble3D& aPosition,
-                    const gfx::QuaternionDouble& aOrientation,
+void XRView::Update(const gfx::Matrix4x4Double& aEyeTransform,
                     const gfx::Matrix4x4& aProjectionMatrix) {
-  mPosition = aPosition;
-  mOrientation = aOrientation;
+  mEyeTransform = aEyeTransform;
   mProjectionMatrix = aProjectionMatrix;
   if (mTransform) {
-    mTransform->Update(aPosition, aOrientation);
+    mTransform->Update(mEyeTransform);
   }
   if (aProjectionMatrix != mProjectionMatrix) {
     mProjectionNeedsUpdate = true;
@@ -74,7 +71,7 @@ void XRView::GetProjectionMatrix(JSContext* aCx,
 
 already_AddRefed<XRRigidTransform> XRView::GetTransform(ErrorResult& aRv) {
   if (!mTransform) {
-    mTransform = new XRRigidTransform(mParent, mPosition, mOrientation);
+    mTransform = new XRRigidTransform(mParent, mEyeTransform);
   }
   RefPtr<XRRigidTransform> transform = mTransform;
   return transform.forget();
diff --git a/dom/vr/XRView.h b/dom/vr/XRView.h
index 157e48902265..5afe0b061732 100644
--- a/dom/vr/XRView.h
+++ b/dom/vr/XRView.h
@@ -24,8 +24,7 @@ class XRView final : public nsWrapperCache {
 
   explicit XRView(nsISupports* aParent, const XREye& aEye);
 
-  void Update(const gfx::PointDouble3D& aPosition,
-              const gfx::QuaternionDouble& aOrientation,
+  void Update(const gfx::Matrix4x4Double& aEyeTransform,
               const gfx::Matrix4x4& aProjectionMatrix);
   // WebIDL Boilerplate
   nsISupports* GetParentObject() const { return mParent; }
@@ -43,8 +42,7 @@ class XRView final : public nsWrapperCache {
 
   nsCOMPtr<nsISupports> mParent;
   XREye mEye;
-  gfx::PointDouble3D mPosition;
-  gfx::QuaternionDouble mOrientation;
+  gfx::Matrix4x4Double mEyeTransform;
   gfx::Matrix4x4 mProjectionMatrix;
   JS::Heap<JSObject*> mJSProjectionMatrix;
   bool mProjectionNeedsUpdate = true;
diff --git a/gfx/vr/external_api/moz_external_vr.h b/gfx/vr/external_api/moz_external_vr.h
index 1777c57b9b46..7c69aa044cce 100644
--- a/gfx/vr/external_api/moz_external_vr.h
+++ b/gfx/vr/external_api/moz_external_vr.h
@@ -48,7 +48,7 @@ namespace gfx {
 // running at the same time? Or...what if we have multiple
 // release builds running on same machine? (Bug 1563232)
 #define SHMEM_VERSION "0.0.11"
-static const int32_t kVRExternalVersion = 18;
+static const int32_t kVRExternalVersion = 19;
 
 // We assign VR presentations to groups with a bitmask.
 // Currently, we will only display either content or chrome.
@@ -344,7 +344,7 @@ struct VRDisplayState {
   VRDisplayCapabilityFlags capabilityFlags;
   VRDisplayBlendMode blendMode;
   VRFieldOfView eyeFOV[VRDisplayState::NumEyes];
-  Point3D_POD eyeTranslation[VRDisplayState::NumEyes];
+  float eyeTransform[VRDisplayState::NumEyes][16];
   IntSize_POD eyeResolution;
   float nativeFramebufferScaleFactor;
   bool suppressFrames;
diff --git a/gfx/vr/gfxVR.cpp b/gfx/vr/gfxVR.cpp
index ed1c6d32d6f6..b2a385fec92e 100644
--- a/gfx/vr/gfxVR.cpp
+++ b/gfx/vr/gfxVR.cpp
@@ -72,9 +72,17 @@ const IntSize VRDisplayInfo::SuggestedEyeResolution() const {
 }
 
 const Point3D VRDisplayInfo::GetEyeTranslation(uint32_t whichEye) const {
-  return Point3D(mDisplayState.eyeTranslation[whichEye].x,
-                 mDisplayState.eyeTranslation[whichEye].y,
-                 mDisplayState.eyeTranslation[whichEye].z);
+  return Point3D(mDisplayState.eyeTransform[whichEye][12],
+                 mDisplayState.eyeTransform[whichEye][13],
+                 mDisplayState.eyeTransform[whichEye][14]);
+}
+
+const Matrix4x4Double VRDisplayInfo::GetEyeTransform(uint32_t whichEye) const {
+  Matrix4x4Double m;
+  for (int i = 0; i < 16; ++i) {
+    m.components[i] = static_cast<double>(mDisplayState.eyeTransform[whichEye][i]);
+  }
+  return m;
 }
 
 const Size VRDisplayInfo::GetStageSize() const {
diff --git a/gfx/vr/gfxVR.h b/gfx/vr/gfxVR.h
index d4d772b6a26e..f9c130c16924 100644
--- a/gfx/vr/gfxVR.h
+++ b/gfx/vr/gfxVR.h
@@ -65,6 +65,7 @@ struct VRDisplayInfo {
 
   const IntSize SuggestedEyeResolution() const;
   const Point3D GetEyeTranslation(uint32_t whichEye) const;
+  const Matrix4x4Double GetEyeTransform(uint32_t whichEye) const;
   const VRFieldOfView& GetEyeFOV(uint32_t whichEye) const {
     return mDisplayState.eyeFOV[whichEye];
   }
-- 
2.35.1

