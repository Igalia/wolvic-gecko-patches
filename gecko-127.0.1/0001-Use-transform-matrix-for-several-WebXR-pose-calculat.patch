diff --git a/dom/vr/XRBoundedReferenceSpace.cpp b/dom/vr/XRBoundedReferenceSpace.cpp
index 8d6eb25fdf..200a2539f8 100644
--- a/dom/vr/XRBoundedReferenceSpace.cpp
+++ b/dom/vr/XRBoundedReferenceSpace.cpp
@@ -50,22 +50,14 @@ void XRBoundedReferenceSpace::GetBoundsGeometry(
 
 already_AddRefed<XRReferenceSpace>
 XRBoundedReferenceSpace::GetOffsetReferenceSpace(
-    const XRRigidTransform& aOriginOffset) {
+    const XRRigidTransform& aOffsetTransform) {
   RefPtr<XRBoundedReferenceSpace> offsetReferenceSpace =
       new XRBoundedReferenceSpace(GetParentObject(), mSession, mNativeOrigin);
 
-  // https://immersive-web.github.io/webxr/#multiply-transforms
-  // An XRRigidTransform is essentially a rotation followed by a translation
-  gfx::QuaternionDouble otherOrientation = aOriginOffset.RawOrientation();
-  // The resulting rotation is the two combined
-  offsetReferenceSpace->mOriginOffsetOrientation =
-      mOriginOffsetOrientation * otherOrientation;
-  // We first apply the rotation of aOriginOffset to
-  // mOriginOffsetPosition offset, then translate by the offset of
-  // aOriginOffset
-  offsetReferenceSpace->mOriginOffsetPosition =
-      otherOrientation.RotatePoint(mOriginOffsetPosition) +
-      aOriginOffset.RawPosition();
+  // https://immersive-web.github.io/webxr/#dom-xrreferencespace-getoffsetreferencespace
+  // Set offsetSpace’s origin offset to the result of multiplying base’s origin offset
+  // by originOffset in the relevant realm of base.
+  offsetReferenceSpace->mOriginOffset = mOriginOffset * aOffsetTransform.RawTransform();
 
   return offsetReferenceSpace.forget();
 }
diff --git a/dom/vr/XRFrame.cpp b/dom/vr/XRFrame.cpp
index 639bb2b019..1561d36eb0 100644
--- a/dom/vr/XRFrame.cpp
+++ b/dom/vr/XRFrame.cpp
@@ -81,12 +81,7 @@ already_AddRefed<XRViewerPose> XRFrame::GetViewerPose(
     headTransform.SetRotationFromQuaternion(viewerOrientation);
     headTransform.PostTranslate(viewerPosition);
 
-    gfx::Matrix4x4Double originTransform;
-    originTransform.SetRotationFromQuaternion(
-        aReferenceSpace.GetEffectiveOriginOrientation().Inverse());
-    originTransform.PreTranslate(-aReferenceSpace.GetEffectiveOriginPosition());
-
-    headTransform *= originTransform;
+    headTransform *= aReferenceSpace.GetEffectiveOriginTransform().Inverse();
 
     viewerPose = mSession->PooledViewerPose(headTransform, emulatedPosition);
 
@@ -156,13 +151,9 @@ already_AddRefed<XRPose> XRFrame::GetPose(const XRSpace& aSpace,
   // TODO (Bug 1616393) - Check if poses must be limited:
   // https://immersive-web.github.io/webxr/#poses-must-be-limited
 
-  const bool emulatedPosition = aSpace.IsPositionEmulated();
-  gfx::Matrix4x4Double base;
-  base.SetRotationFromQuaternion(
-      aBaseSpace.GetEffectiveOriginOrientation().Inverse());
-  base.PreTranslate(-aBaseSpace.GetEffectiveOriginPosition());
+  const bool emulatedPosition = aSpace.IsPositionEmulated() || aBaseSpace.IsPositionEmulated();
 
-  gfx::Matrix4x4Double matrix = aSpace.GetEffectiveOriginTransform() * base;
+  gfx::Matrix4x4Double matrix = aSpace.GetEffectiveOriginTransform() * aBaseSpace.GetEffectiveOriginTransform().Inverse();
 
   RefPtr<XRRigidTransform> transform = new XRRigidTransform(mParent, matrix);
   RefPtr<XRPose> pose = new XRPose(mParent, transform, emulatedPosition);
diff --git a/dom/vr/XRNativeOriginLocal.cpp b/dom/vr/XRNativeOriginLocal.cpp
index fd4590cf9e..32f0f3f2ec 100644
--- a/dom/vr/XRNativeOriginLocal.cpp
+++ b/dom/vr/XRNativeOriginLocal.cpp
@@ -15,20 +15,7 @@ XRNativeOriginLocal::XRNativeOriginLocal(gfx::VRDisplayClient* aDisplay)
 }
 
 gfx::PointDouble3D XRNativeOriginLocal::GetPosition() {
-  // Keep returning {0,0,0} until a position can be found
-  if (!mInitialPositionValid) {
-    const gfx::VRHMDSensorState& sensorState = mDisplay->GetSensorState();
-    gfx::PointDouble3D origin;
-    if (sensorState.flags & gfx::VRDisplayCapabilityFlags::Cap_Position ||
-        sensorState.flags &
-            gfx::VRDisplayCapabilityFlags::Cap_PositionEmulated) {
-      mInitialPosition.x = sensorState.pose.position[0];
-      mInitialPosition.y = sensorState.pose.position[1];
-      mInitialPosition.z = sensorState.pose.position[2];
-      mInitialPositionValid = true;
-    }
-  }
-  return mInitialPosition;
+  return { };
 }
 
 }  // namespace mozilla::dom
diff --git a/dom/vr/XRNativeOriginLocalFloor.cpp b/dom/vr/XRNativeOriginLocalFloor.cpp
index 2cd146d925..a60a714b0a 100644
--- a/dom/vr/XRNativeOriginLocalFloor.cpp
+++ b/dom/vr/XRNativeOriginLocalFloor.cpp
@@ -29,9 +29,9 @@ gfx::PointDouble3D XRNativeOriginLocalFloor::GetPosition() {
       mDisplay->GetDisplayInfo().GetSittingToStandingTransform();
   if (!mInitialPositionValid || standing != mStandingTransform) {
     const gfx::VRHMDSensorState& sensorState = mDisplay->GetSensorState();
-    mInitialPosition.x = sensorState.pose.position[0];
+    mInitialPosition.x = 0;
     mInitialPosition.y = -mFloorRandom - standing._42;
-    mInitialPosition.z = sensorState.pose.position[2];
+    mInitialPosition.z = 0;
     mInitialPositionValid = true;
     mStandingTransform = standing;
   }
diff --git a/dom/vr/XRReferenceSpace.cpp b/dom/vr/XRReferenceSpace.cpp
index 9ed73003cd..c442a916c6 100644
--- a/dom/vr/XRReferenceSpace.cpp
+++ b/dom/vr/XRReferenceSpace.cpp
@@ -17,22 +17,14 @@ XRReferenceSpace::XRReferenceSpace(nsIGlobalObject* aParent,
     : XRSpace(aParent, aSession, aNativeOrigin), mType(aType) {}
 
 already_AddRefed<XRReferenceSpace> XRReferenceSpace::GetOffsetReferenceSpace(
-    const XRRigidTransform& aOriginOffset) {
+    const XRRigidTransform& aOffsetTransform) {
   RefPtr<XRReferenceSpace> offsetReferenceSpace =
       new XRReferenceSpace(GetParentObject(), mSession, mNativeOrigin, mType);
 
-  // https://immersive-web.github.io/webxr/#multiply-transforms
-  // An XRRigidTransform is essentially a rotation followed by a translation
-  gfx::QuaternionDouble otherOrientation = aOriginOffset.RawOrientation();
-  // The resulting rotation is the two combined
-  offsetReferenceSpace->mOriginOffsetOrientation =
-      mOriginOffsetOrientation * otherOrientation;
-  // We first apply the rotation of aOriginOffset to
-  // mOriginOffsetPosition offset, then translate by the offset of
-  // aOriginOffset
-  offsetReferenceSpace->mOriginOffsetPosition =
-      otherOrientation.RotatePoint(mOriginOffsetPosition) +
-      aOriginOffset.RawPosition();
+  // https://immersive-web.github.io/webxr/#dom-xrreferencespace-getoffsetreferencespace
+  // Set offsetSpace’s origin offset to the result of multiplying base’s origin offset by
+  // originOffset in the relevant realm of base.
+  offsetReferenceSpace->mOriginOffset = mOriginOffset * aOffsetTransform.RawTransform();
 
   return offsetReferenceSpace.forget();
 }
diff --git a/dom/vr/XRRigidTransform.cpp b/dom/vr/XRRigidTransform.cpp
index d29937c56a..c900587f4f 100644
--- a/dom/vr/XRRigidTransform.cpp
+++ b/dom/vr/XRRigidTransform.cpp
@@ -95,6 +95,10 @@ gfx::PointDouble3D XRRigidTransform::RawPosition() const {
   return mRawPosition;
 }
 
+gfx::Matrix4x4Double XRRigidTransform::RawTransform() const {
+  return mRawTransformMatrix;
+}
+
 void XRRigidTransform::Update(const gfx::PointDouble3D& aPosition,
                               const gfx::QuaternionDouble& aOrientation) {
   mNeedsUpdate = true;
diff --git a/dom/vr/XRRigidTransform.h b/dom/vr/XRRigidTransform.h
index defeebe13d..878f4e8b5e 100644
--- a/dom/vr/XRRigidTransform.h
+++ b/dom/vr/XRRigidTransform.h
@@ -32,6 +32,7 @@ class XRRigidTransform final : public nsWrapperCache {
   XRRigidTransform& operator=(const XRRigidTransform& aOther);
   gfx::QuaternionDouble RawOrientation() const;
   gfx::PointDouble3D RawPosition() const;
+  gfx::Matrix4x4Double RawTransform() const;
   void Update(const gfx::PointDouble3D& aPosition,
               const gfx::QuaternionDouble& aOrientation);
   void Update(const gfx::Matrix4x4Double& aTransform);
diff --git a/dom/vr/XRSpace.cpp b/dom/vr/XRSpace.cpp
index 1f6449e870..e74d01be75 100644
--- a/dom/vr/XRSpace.cpp
+++ b/dom/vr/XRSpace.cpp
@@ -28,9 +28,7 @@ XRSpace::XRSpace(nsIGlobalObject* aParent, XRSession* aSession,
                  XRNativeOrigin* aNativeOrigin)
     : DOMEventTargetHelper(aParent),
       mSession(aSession),
-      mNativeOrigin(aNativeOrigin),
-      mOriginOffsetPosition(0.0f, 0.0f, 0.0f),
-      mOriginOffsetOrientation(0.0f, 0.0f, 0.0f, 1.0f) {}
+      mNativeOrigin(aNativeOrigin) {}
 
 JSObject* XRSpace::WrapObject(JSContext* aCx,
                               JS::Handle<JSObject*> aGivenProto) {
@@ -39,25 +37,18 @@ JSObject* XRSpace::WrapObject(JSContext* aCx,
 
 XRSession* XRSpace::GetSession() const { return mSession; }
 
-gfx::QuaternionDouble XRSpace::GetEffectiveOriginOrientation() const {
-  gfx::QuaternionDouble orientation =
-      mNativeOrigin->GetOrientation() * mOriginOffsetOrientation;
-  return orientation;
-}
-
-gfx::PointDouble3D XRSpace::GetEffectiveOriginPosition() const {
-  gfx::PointDouble3D position;
-  position = mNativeOrigin->GetPosition();
-  position = mOriginOffsetOrientation.RotatePoint(position);
-  position += mOriginOffsetPosition;
-  return position;
+gfx::Matrix4x4Double XRSpace::GetNativeOriginTransform() const {
+  if (!mNativeOrigin) {
+    return {};
+  }
+  gfx::Matrix4x4Double transform;
+  transform.SetRotationFromQuaternion(mNativeOrigin->GetOrientation());
+  transform.PostTranslate(mNativeOrigin->GetPosition());
+  return transform;
 }
 
 gfx::Matrix4x4Double XRSpace::GetEffectiveOriginTransform() const {
-  gfx::Matrix4x4Double transform;
-  transform.SetRotationFromQuaternion(GetEffectiveOriginOrientation());
-  transform.PostTranslate(GetEffectiveOriginPosition());
-  return transform;
+  return GetNativeOriginTransform() * mOriginOffset;
 }
 
 bool XRSpace::IsPositionEmulated() const {
diff --git a/dom/vr/XRSpace.h b/dom/vr/XRSpace.h
index a87480857e..ff1efc2a01 100644
--- a/dom/vr/XRSpace.h
+++ b/dom/vr/XRSpace.h
@@ -34,8 +34,7 @@ class XRSpace : public DOMEventTargetHelper {
   XRNativeOrigin* GetNativeOrigin() const;
 
   // Non webIDL Members
-  gfx::QuaternionDouble GetEffectiveOriginOrientation() const;
-  gfx::PointDouble3D GetEffectiveOriginPosition() const;
+  gfx::Matrix4x4Double GetNativeOriginTransform() const;
   gfx::Matrix4x4Double GetEffectiveOriginTransform() const;
   virtual bool IsPositionEmulated() const;
 
@@ -47,8 +46,7 @@ class XRSpace : public DOMEventTargetHelper {
 
   // https://immersive-web.github.io/webxr/#xrspace-origin-offset
   // Origin Offset, represented as a rigid transform
-  gfx::PointDouble3D mOriginOffsetPosition;
-  gfx::QuaternionDouble mOriginOffsetOrientation;
+  gfx::Matrix4x4Double mOriginOffset;
 };
 
 }  // namespace mozilla::dom
-- 
2.40.1

